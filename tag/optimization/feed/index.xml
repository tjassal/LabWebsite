<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>optimization &#8211; The Biogoegraphy &amp; Landscape Dynamics Lab</title>
	<atom:link href="https://tjassal.github.io/LabWebsite/tag/optimization/feed/" rel="self" type="application/rss+xml" />
	<link>https://tjassal.github.io/LabWebsite/</link>
	<description>Research focused on biogeography, spatial ecology and landscape change at Kent State University</description>
	<lastBuildDate>Mon, 03 Jun 2019 15:21:41 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2</generator>
<site xmlns="com-wordpress:feed-additions:1">77891341</site>	<item>
		<title>clusterR is sweet &#8211; but beware when using with predict fxn</title>
		<link>https://tjassal.github.io/LabWebsite/2018/12/05/clusterr-is-sweet-but-beware-when-using-with-predict-fxn/</link>
				<comments>https://tjassal.github.io/LabWebsite/2018/12/05/clusterr-is-sweet-but-beware-when-using-with-predict-fxn/#comments</comments>
				<pubDate>Wed, 05 Dec 2018 19:43:20 +0000</pubDate>
		<dc:creator><![CDATA[tim.assal@gmail.com]]></dc:creator>
				<category><![CDATA[Blog-lite]]></category>
		<category><![CDATA[clusterR]]></category>
		<category><![CDATA[machine learning]]></category>
		<category><![CDATA[multiple cores]]></category>
		<category><![CDATA[open source]]></category>
		<category><![CDATA[optimization]]></category>
		<category><![CDATA[parallel processing]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[R statistics]]></category>
		<category><![CDATA[randomForests]]></category>
		<category><![CDATA[remote sensing]]></category>
		<category><![CDATA[science communication]]></category>
		<category><![CDATA[spatial ecology]]></category>
		<category><![CDATA[Spatial Statistics]]></category>
		<category><![CDATA[species distribution modeling]]></category>

		<guid isPermaLink="false">https://tjassal.github.io/LabWebsite/?p=1920</guid>
				<description><![CDATA[I ran into an issue recently using clusterR to predict randomForest model outputs. It took me awhile to troubleshoot,  so if you have had the same problem, hopefully you find this post and it saves you some time. If you&#8217;ve come up with a different solution (i.e. I&#8217;m wrong), please let me know. **It turns &#8230; <a href="https://tjassal.github.io/LabWebsite/2018/12/05/clusterr-is-sweet-but-beware-when-using-with-predict-fxn/" class="more-link">Continue reading <span class="screen-reader-text">clusterR is sweet &#8211; but beware when using with predict fxn</span> <span class="meta-nav">&#8594;</span></a>]]></description>
								<content:encoded><![CDATA[<p><em>I ran into an issue recently using <code>clusterR</code> to predict randomForest model outputs. It took me awhile to troubleshoot,  so if you have had the same problem, hopefully you find this post and it saves you some time. If you&#8217;ve come up with a different solution (i.e. I&#8217;m wrong), please let me know. <strong><span style="color: #ff0000;">**It turns out I was wrong! See the solution below**</span></strong><br />
</em></p>
<p><strong>In short:</strong> when using clusterR to predict the probability of occurrence output of a randomForest model, it automatically defaults to the binary output. This is problematic if you&#8217;re interested in the probability output to use in another RF model or if you want to set the threshold at which to convert the probability model to a binary data set. However, clusterR works just fine to predict other randomForest outputs (e.g. percent cover, type=&#8217;response&#8217;). See below for an example.</p>
<p><code>clusterR</code> is a flexible interface for using cluster with other functions. This function only works with functions that have a Raster* object as first argument and that operate on a cell by cell basis (i.e., there is no effect of neigboring cells) and return an object with the same number of cells as the input raster object (from ?clusterR). Martin Šiklar has a <a href="https://www.gis-blog.com/increasing-the-speed-of-raster-processing-with-r-part-33-cluster/" target="_blank" rel="noopener noreferrer">nice post</a> on increasing the speed of raster processing using clusterR.</p>
<p>Below I&#8217;ve generated a basic randomForest classification model and predict the probability of occurrence output (continuous).</p><pre class="crayon-plain-tag">library(raster)
#load an example raster stack
logo &lt;- stack(system.file("external/rlogo.grd", package="raster"))
plot(logo)

#generate presence and random background (pseudo-absence) points
presence &lt;- matrix(c(85, 60, 79, 50, 20,48, 50, 30, 70, 90, 48, 48, 48, 53, 50, 46, 54, 70, 84, 85, 74, 84, 95, 85, 66, 42, 26, 4, 19, 17, 5, 52, 10, 68, 50, 52, 18, 20, 30, 60, 7, 14, 26, 29, 39, 45, 51, 56, 46, 38, 31, 22, 34, 60, 70, 73, 63, 46, 43, 28), ncol=2)
#random background
background &lt;- cbind(runif(250)*(xmax(logo)-xmin(logo))+xmin(logo), runif(250)*(ymax(logo)-ymin(logo))+ymin(logo))

#extract values for points from stack
xy &lt;- rbind(cbind(1, presence), cbind(0, background))
v &lt;- cbind(xy[,1], extract(logo, xy[,2:3]))
colnames(v)[1] &lt;- 'presback'
#convert to dataframe
v.df&lt;-as.data.frame(v)

#check the dataframe
typeof(v.df$presback) #double
as.factor(v.df$presback)
#random forests needs to see the '1' first thus the relevel; 1=present, 0=absent; 
v.df$presback &lt;-  relevel(as.factor(ifelse(v.df$presback==1,1,0)),"1")
str(v.df) #ensure y (presback) is a factor because we're interested in a classification, not a regression

##run a random forest model
library(randomForest)
model.RF &lt;- randomForest(presback~., data=v.df) #classification model 
model.RF #note, it's not a great model fit, but not the point here
#predict probability output without cluster
r.prob &lt;- predict(logo, type='prob', model.RF, progress='text') #type = 'prob' -&gt; probability of occurrence model
plot(r.prob)
points(presence, bg='blue', pch=21)
points(background, bg='red', pch=21)</pre><p><figure id="attachment_1988" aria-describedby="caption-attachment-1988" style="width: 509px" class="wp-caption aligncenter"><a href="https://i1.wp.com/www.timassal.com/wp-content/uploads/2018/12/RF_predict_longhand.jpeg" target="_blank" rel="noopener noreferrer"><img class="wp-image-1988 size-full" src="https://i1.wp.com/www.timassal.com/wp-content/uploads/2018/12/RF_predict_longhand.jpeg?resize=474%2C422" alt="" width="474" height="422" srcset="https://i1.wp.com/www.timassal.com/wp-content/uploads/2018/12/RF_predict_longhand.jpeg?w=509&amp;ssl=1 509w, https://i1.wp.com/www.timassal.com/wp-content/uploads/2018/12/RF_predict_longhand.jpeg?resize=300%2C267&amp;ssl=1 300w" sizes="(max-width: 474px) 100vw, 474px" data-recalc-dims="1" /></a><figcaption id="caption-attachment-1988" class="wp-caption-text">The probability of occurrence model output using the traditional predict function in the raster library.</figcaption></figure></p>
<p>Next, I use clusterR to predict the same output; however, it results in a binary output.</p><pre class="crayon-plain-tag">#now make the prediction using multiple cores
library(cluster)
library(parallel)

# create a cluster and ID the # of cores to use
beginCluster(3)
#predict fxn using clusterR
r.prob.Cluster&lt;-clusterR(logo, predict, args=list(model.RF), progress='text', type='prob')
endCluster() #delete the cluster
plot(r.prob.Cluster)
points(presence, bg='blue', pch=21)</pre><p><figure id="attachment_1990" aria-describedby="caption-attachment-1990" style="width: 509px" class="wp-caption aligncenter"><a href="https://i1.wp.com/www.timassal.com/wp-content/uploads/2018/12/RF_predict_usingCluster.jpeg" target="_blank" rel="noopener noreferrer"><img class="wp-image-1990 size-full" src="https://i1.wp.com/www.timassal.com/wp-content/uploads/2018/12/RF_predict_usingCluster.jpeg?resize=474%2C422" alt="" width="474" height="422" srcset="https://i1.wp.com/www.timassal.com/wp-content/uploads/2018/12/RF_predict_usingCluster.jpeg?w=509&amp;ssl=1 509w, https://i1.wp.com/www.timassal.com/wp-content/uploads/2018/12/RF_predict_usingCluster.jpeg?resize=300%2C267&amp;ssl=1 300w" sizes="(max-width: 474px) 100vw, 474px" data-recalc-dims="1" /></a><figcaption id="caption-attachment-1990" class="wp-caption-text">The probability of occurrence model output when using the predict function in tandem with clusterR. As you can see the output is binary, even though type=&#8217;prob&#8217; was specified.</figcaption></figure></p>
<p>I&#8217;d highly recommend using clusterR whenever possible as it will save you a lot of time, particularly when making predictions with raster data. It will allow you to work in parallel and take advantage of multiple cores on your machine. My goal here is to simply make you aware of the issue with clusterR with respect to predicting probability of occurrence models. I am unaware of any solution, except to use the longhand predict function in the raster library when you need to predict the probability of occurrence model output.</p>
<p><strong><span style="color: #ff0000;">**Solution**</span></strong></p>
<p><span style="color: #ff0000;">I simply failed to have include type=&#8217;prob&#8217; inside the args() part of the clusterR() function. Once I cleaned up the syntax, I had no problem!</span></p>
]]></content:encoded>
							<wfw:commentRss>https://tjassal.github.io/LabWebsite/2018/12/05/clusterr-is-sweet-but-beware-when-using-with-predict-fxn/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1920</post-id>	</item>
	</channel>
</rss>
